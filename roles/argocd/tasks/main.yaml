---
- name: Import facts
  ansible.builtin.include_role:
    name: '{{ item }}'
    tasks_from: facts
  loop:
    - cloudflare
    - k3s

- name: Install Dependencies
  when: ansible_host in k3s_server_hosts
  block:
    - name: Set binary fact
      ansible.builtin.set_fact:
        binary:
          org: argoproj
          repo: argo-cd
          version: '{{ argocd_vars.argocd.version }}'
          checksums: cli_checksums.txt
          name: '{{ argocd_vars.argocd.name }}'
      run_once: true

    - name: Set checksums fact
      ansible.builtin.uri:
        url: https://github.com/{{ binary['org'] }}/{{ binary['repo'] }}/releases/download/{{ binary['version'] }}/{{ binary['checksums'] }}
        return_content: true
      register: checksums
      run_once: true

    - name: Set sha256 checksum fact
      ansible.builtin.set_fact:
        sha256_checksum: "{{ item.split(' ')[0] }}"
      loop: "{{ checksums.content.split('\n') }}"
      when: argocd_vars.argocd.name in item
      run_once: true

    - name: Install binary
      ansible.builtin.get_url:
        url: https://github.com/{{ binary['org'] }}/{{ binary['repo'] }}/releases/download/{{ binary['version'] }}/{{ binary['name'] }}
        checksum: sha256:{{ sha256_checksum }}
        dest: /usr/local/bin/argocd
        owner: root
        group: root
        mode: '0755'
      register: result
      delay: 1
      retries: 3
      until: result is not failed

    - name: Add repository
      kubernetes.core.helm_repository:
        name: '{{ argocd_vars.kubernetes.helm.repository.name }}'
        repo_url: '{{ argocd_vars.kubernetes.helm.repository.url }}'

- name: Chart Setup
  when: ansible_host == k3s_server_default_host
  block:
    - name: Set hostname fact
      ansible.builtin.set_fact:
        hostname: '{{ argocd_vars.kubernetes.server.gateway.subdomain }}.{{ cloudflare_vars.kubernetes.gateway.domain }}'
      run_once: true
      when: cloudflare_vars.kubernetes.gateway.domain != 'disabled'

    - name: Set server user settings fact
      ansible.builtin.set_fact:
        server:
          admin:
            password: "{{ argocd_vars.kubernetes.server.admin.password | string | ansible.builtin.password_hash('blowfish') }}"
          user:
            name: '{{ argocd_vars.kubernetes.server.user.name }}'
            password: "{{ argocd_vars.kubernetes.server.user.password | string | ansible.builtin.password_hash('blowfish') }}"
      no_log: true
      run_once: true

    - name: Install chart
      kubernetes.core.helm:
        chart_ref: '{{ argocd_vars.kubernetes.helm.repository.name }}/{{ argocd_vars.kubernetes.helm.chart.name }}'
        chart_version: '{{ argocd_vars.kubernetes.helm.chart.version }}'
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        name: '{{ argocd_vars.kubernetes.helm.chart.name }}'
        namespace: '{{ argocd_vars.kubernetes.namespace }}'
        update_repo_cache: true
        values: "{{ lookup('ansible.builtin.template', 'values.j2') | from_yaml }}"
        wait: true
      register: result
      delay: 1
      retries: 3
      until: result is not failed

    - name: Gateway Setup
      when: cloudflare_vars.kubernetes.gateway.domain != 'disabled'
      block:
        - name: Create server gateway
          kubernetes.core.k8s:
            definition: "{{ lookup('ansible.builtin.template', 'gateway.j2') | from_yaml }}"
            kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
            wait: true

        - name: Create http route
          kubernetes.core.k8s:
            definition: "{{ lookup('ansible.builtin.template', 'http_route.j2') | from_yaml }}"
            kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
            wait: true

        - name: Create https route
          kubernetes.core.k8s:
            definition: "{{ lookup('ansible.builtin.template', 'https_route.j2') | from_yaml }}"
            kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
            wait: true

    - name: Set server loadbalancer ip
      kubernetes.core.k8s:
        definition: "{{ lookup('ansible.builtin.template', 'loadbalancer.j2') | from_yaml }}"
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        wait: true
      when: cloudflare_vars.kubernetes.gateway.domain == 'disabled'

    - name: Set server user name
      kubernetes.core.k8s:
        definition: "{{ lookup('ansible.builtin.template', 'user.j2') | from_yaml }}"
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        wait: true

    - name: Set server user password
      kubernetes.core.k8s:
        definition: "{{ lookup('ansible.builtin.template', 'password.j2') | from_yaml }}"
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        wait: true
      no_log: true

    - name: Set server rbac policy
      kubernetes.core.k8s:
        definition: "{{ lookup('ansible.builtin.template', 'policy.j2') | from_yaml }}"
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        wait: true
