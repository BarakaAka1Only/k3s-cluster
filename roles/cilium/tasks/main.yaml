---
- name: Import facts
  ansible.builtin.import_role:
    name: k3s
    tasks_from: facts

- name: Install Dependencies
  tags: deps
  when: ansible_host in k3s_server_hosts
  block:
    - name: Set binary fact
      ansible.builtin.set_fact:
        binary:
          - org: cilium
            repo: cilium-cli
            version: '{{ cilium_vars.cli.version }}'
            name: '{{ cilium_vars.cli.name }}'
          - org: cilium
            repo: hubble
            version: '{{ cilium_vars.hubble.version }}'
            name: '{{ cilium_vars.hubble.name }}'
      run_once: true

    - name: Download archive
      ansible.builtin.get_url:
        url: https://github.com/{{ item.org }}/{{ item.repo }}/releases/download/{{ item.version }}/{{ item.name }}
        checksum: sha256:https://github.com/{{ item.org }}/{{ item.repo }}/releases/download/{{ item.version }}/{{ item.name }}.sha256sum
        dest: /tmp
        owner: root
        group: root
        mode: '0644'
      loop: '{{ binary }}'
      register: result
      delay: 1
      retries: 3
      until: result is not failed

    - name: Install binary
      ansible.builtin.unarchive:
        src: /tmp/{{ item.name }}
        dest: /usr/local/bin
        owner: root
        group: root
        mode: '0755'
        remote_src: true
      loop: '{{ binary }}'

    - name: Delete archive
      ansible.builtin.file:
        path: /tmp/{{ item.name }}
        state: absent
      loop: '{{ binary }}'

    - name: Add repository
      kubernetes.core.helm_repository:
        name: '{{ cilium_vars.kubernetes.helm.repository.name }}'
        repo_url: '{{ cilium_vars.kubernetes.helm.repository.url }}'

- name: Chart Setup
  tags: chart
  when: ansible_host == k3s_server_default_host
  block:
    - name: Apply gateway api crds manifest
      kubernetes.core.k8s:
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        src: https://github.com/kubernetes-sigs/gateway-api/releases/download/{{ cilium_vars.kubernetes.gateway_api.version }}/experimental-install.yaml

    - name: Set chart setup fact
      ansible.builtin.set_fact:
        chart_setup: true
      run_once: true

    - name: Set chart update fact
      ansible.builtin.set_fact:
        chart_update: false
      run_once: true

    - name: Install chart
      kubernetes.core.helm:
        chart_ref: '{{ cilium_vars.kubernetes.helm.repository.name }}/{{ cilium_vars.kubernetes.helm.chart.name }}'
        chart_version: '{{ cilium_vars.kubernetes.helm.chart.version }}'
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        name: '{{ cilium_vars.kubernetes.helm.chart.name }}'
        namespace: '{{ cilium_vars.kubernetes.namespace }}'
        update_repo_cache: true
        values: "{{ lookup('ansible.builtin.template', 'values.j2') | from_yaml }}"
        wait: true
      register: result
      delay: 1
      retries: 3
      until: result is not failed

    - name: Create l2 announcement policy
      kubernetes.core.k8s:
        definition: "{{ lookup('ansible.builtin.template', 'l2_announcement_policy.j2') | from_yaml }}"
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        wait: true

    - name: Create loadbalancer ip pool
      kubernetes.core.k8s:
        definition: "{{ lookup('ansible.builtin.template', 'loadbalancer_ip_pool.j2') | from_yaml }}"
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        wait: true

    - name: Set chart setup fact
      ansible.builtin.set_fact:
        chart_setup: false
      run_once: true

    - name: Update chart values
      kubernetes.core.helm:
        chart_ref: '{{ cilium_vars.kubernetes.helm.repository.name }}/{{ cilium_vars.kubernetes.helm.chart.name }}'
        chart_version: '{{ cilium_vars.kubernetes.helm.chart.version }}'
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        name: '{{ cilium_vars.kubernetes.helm.chart.name }}'
        namespace: '{{ cilium_vars.kubernetes.namespace }}'
        update_repo_cache: true
        reset_values: false
        reuse_values: true
        values: "{{ lookup('ansible.builtin.template', 'values.j2') | from_yaml }}"
        wait: true
      register: result
      delay: 1
      retries: 3
      until: result is not failed
